name: Docker Build & Push

on:
  push:
    branches:
      - main
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: inkodus-home-task
  OWNER_NAME: tautcius

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  bump-version:
    runs-on: ubuntu-latest
    concurrency: release
    permissions:
      id-token: write
      contents: write
    outputs:
      version: ${{ steps.semver.outputs.version }}
      isReleased: ${{ steps.semver.outputs.released }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Python Semantic Release
        uses: python-semantic-release/python-semantic-release@master
        id: semver
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          directory: src

  build-and-push-image:
    if: needs.bump-version.outputs.isReleased == 'true'
    runs-on: ubuntu-latest
    needs:
      - bump-version
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
          flavor: |
            latest=true
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.OWNER_NAME }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.OWNER_NAME }}/${{ env.IMAGE_NAME }}:${{ needs.bump-version.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}

  helm-rekease:
    if: needs.bump-version.outputs.isReleased == 'true'
    runs-on: ubuntu-latest
    needs:
      - bump-version
      - build-and-push-image
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Update values.yaml
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: "charts/inkodus-home-task/values.yaml"
          propertyPath: "image.tag"
          value: ${{ needs.bump-version.outputs.version }}
          commitChange: false

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.8.1

      - name: custom packaging
        run: |
          VERSION=${{ needs.bump-version.outputs.version }}
          rm -rf .cr-release-packages
          mkdir -p .cr-release-packages
          helm package charts/${{ env.IMAGE_NAME }} --app-version=${VERSION} --version=${VERSION} --destination=.cr-release-packages
          helm package charts/${{ env.IMAGE_NAME }} --app-version=${VERSION} --version=${VERSION} --destination=./charts
          tar --extract --file=charts/${{ env.IMAGE_NAME }}-${VERSION}.tgz ${{ env.IMAGE_NAME }}/Chart.yaml

      - name: Run chart-releaser
        # switch back to helm/chart-releaser-action if this contribution is ever merged
        uses: askcloudarchitech/chart-releaser-action@skip-packaging-option
        with:
          skip_packaging: true
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
